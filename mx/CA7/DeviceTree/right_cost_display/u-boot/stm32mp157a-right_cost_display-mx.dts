/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2021 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp157.dtsi"
#include "stm32mp15xa.dtsi"
#include "stm32mp15xxad-pinctrl.dtsi"
#include "stm32mp15-m4-srm.dtsi"

/* USER CODE BEGIN includes */
/* USER CODE END includes */

/ {
	model = "STMicroelectronics custom STM32CubeMX board - openstlinux-5.15-yocto-kirkstone-mp1-v22.06.15";
	compatible = "st,stm32mp157a-right_cost_display-mx", "st,stm32mp157";

	memory@c0000000 {
		device_type = "memory";
		/* SL: Currently set to maximum supported 8Gb (1GiB) programmatically modified in tf-a & u-boot */
		reg = <0xc0000000 0x40000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */	
	lcd_reg: lcd_reg {
		compatible = "regulator-fixed";
		regulator-name = "lcd_reg";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		gpio = <&gpioe 9 GPIO_ACTIVE_HIGH>;
		enable-active-high;
		regulator-boot-on;		/* Turn on immediately */
	};
	
	// bl_pwm_en_reg {
	// 	compatible = "regulator-fixed";
	// 	regulator-name = "bl_pwm_en_reg";
	// 	regulator-min-microvolt = <5000000>;
	// 	regulator-max-microvolt = <5000000>;
	// 	gpio = <&gpiod 14 GPIO_ACTIVE_HIGH>;
	// 	enable-active-high;
	// 	regulator-boot-on;		/* Turn on immediately */
	// };
	
	tp_en_reg {
		compatible = "regulator-fixed";
		regulator-name = "tp_en_reg";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		gpio = <&gpioa 14 GPIO_ACTIVE_HIGH>;
		enable-active-high;			
		regulator-boot-on;		/* Turn on immediately */
	};

	// removed for optimization purposes: no splash needed on uboot
	/*
	panel_backlight: panel_backlight {
		compatible = "gpio-backlight";
		gpios = <&gpiod 14 GPIO_ACTIVE_HIGH>;
		default-on; // turn on at boot/probe time
	};

	panel {
		compatible = "simple-panel";
		power-supply = <&lcd_reg>;
		backlight = <&panel_backlight>;
		//enable-gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;
		//reset-gpios = <&gpioe 11 GPIO_ACTIVE_HIGH>;
		status = "okay";	
		
		
		port@0 {
			reg = <0>;
			panel_in: endpoint {
				remote-endpoint = <&ltdc_ep0_out>;
			};
		};

		display-timings { 
			native-mode = <&timing0>;
			timing0: timing0 {
				clock-frequency = <33300000>;
				hactive = <800>;
				vactive = <480>;
				hfront-porch = <210>;
				hback-porch = <46>;
				hsync-len = <46>;
				vback-porch = <23>;
				vfront-porch = <22>;
				vsync-len = <23>;
				hsync-active = <1>;
				vsync-active = <1>;
				de-active = <0>;
				pixelclk-active = <1>;

			};
		};
	};
	*/

	/* USER CODE END root */

	clocks {
		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */

#ifndef CONFIG_TFABOOT
		clk_lsi: clk-lsi {
			clock-frequency = <32000>;
		};
		clk_hsi: clk-hsi {
			clock-frequency = <64000000>;
		};
		clk_csi: clk-csi {
			clock-frequency = <4000000>;
		};
		clk_lse: clk-lse {
			status = "disabled";
		};
		clk_hse: clk-hse {
			clock-frequency = <24000000>;
		};
#endif	/*CONFIG_TFABOOT*/
	};

}; /*root*/

&pinctrl {
	u-boot,dm-pre-reloc;

	// removed for optimization purposes: not needed on uboot
	/*
	adc_pins_mx: adc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>, /* ADC1_INP16 *//*
					 <STM32_PINMUX('B', 1, ANALOG)>, /* ADC1_INP5 *//*
					 <STM32_PINMUX('C', 2, ANALOG)>, /* ADC1_INP12 *//*
					 <STM32_PINMUX('C', 3, ANALOG)>; /* ADC1_INP13 *//*
		};
	};

	adc_sleep_pins_mx: adc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 0, ANALOG)>, /* ADC1_INP16 *//*
					 <STM32_PINMUX('B', 1, ANALOG)>, /* ADC1_INP5 *//*
					 <STM32_PINMUX('C', 2, ANALOG)>, /* ADC1_INP12 *//*
					 <STM32_PINMUX('C', 3, ANALOG)>; /* ADC1_INP13 *//*
		};
	};

	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_REF_CLK *//*
					 <STM32_PINMUX('B', 12, AF11)>, /* ETH1_TXD0 *//*
					 <STM32_PINMUX('C', 1, AF11)>, /* ETH1_MDC *//*
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('A', 7, AF11)>, /* ETH1_CRS_DV *//*
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 *//*
					 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 *//*
					 <STM32_PINMUX('G', 12, AF11)>; /* ETH1_PHY_INTN *//*
			bias-disable;
		};
		pins4 {
			pinmux = <STM32_PINMUX('B', 11, AF11)>; /* ETH1_TX_EN *//*
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_REF_CLK *//*
					 <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO *//*
					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV *//*
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN *//*
					 <STM32_PINMUX('B', 12, ANALOG)>, /* ETH1_TXD0 *//*
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC *//*
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 *//*
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 *//*
					 <STM32_PINMUX('G', 12, ANALOG)>, /* ETH1_PHY_INTN *//*
					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 *//*
		};
	};

	fdcan1_pins_mx: fdcan1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 11, AF9)>; /* FDCAN1_RX *//*
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 12, AF9)>; /* FDCAN1_TX *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 11, ANALOG)>, /* FDCAN1_RX *//*
					 <STM32_PINMUX('A', 12, ANALOG)>; /* FDCAN1_TX *//*
		};
	};

	fdcan2_pins_mx: fdcan2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 13, AF9)>; /* FDCAN2_TX *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 5, AF9)>; /* FDCAN2_RX *//*
			bias-disable;
		};
	};

	fdcan2_sleep_pins_mx: fdcan2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 5, ANALOG)>, /* FDCAN2_RX *//*
					 <STM32_PINMUX('B', 13, ANALOG)>; /* FDCAN2_TX *//*
		};
	};
	*/

	i2c4_pins_mx: i2c4_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 9, AF6)>, /* I2C4_SDA */
					 <STM32_PINMUX('E', 2, AF4)>; /* I2C4_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c4_sleep_pins_mx: i2c4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 9, ANALOG)>, /* I2C4_SDA */
					 <STM32_PINMUX('E', 2, ANALOG)>; /* I2C4_SCL */
		};
	};

	// removed for optimization purposes: not needed on uboot
	/*
	ltdc_pins_mx: ltdc_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 3, AF14)>, /* LTDC_B5 *//*
					 <STM32_PINMUX('A', 4, AF14)>, /* LTDC_VSYNC *//*
					 <STM32_PINMUX('A', 5, AF14)>, /* LTDC_R4 *//*
					 <STM32_PINMUX('A', 6, AF14)>, /* LTDC_G2 *//*
					 <STM32_PINMUX('A', 8, AF14)>, /* LTDC_R6 *//*
					 <STM32_PINMUX('A', 10, AF14)>, /* LTDC_B1 *//*
					 <STM32_PINMUX('B', 0, AF9)>, /* LTDC_R3 *//*
					 <STM32_PINMUX('B', 8, AF14)>, /* LTDC_B6 *//*
					 <STM32_PINMUX('B', 10, AF14)>, /* LTDC_G4 *//*
					 <STM32_PINMUX('C', 0, AF14)>, /* LTDC_R5 *//*
					 <STM32_PINMUX('C', 6, AF14)>, /* LTDC_HSYNC *//*
					 <STM32_PINMUX('C', 7, AF14)>, /* LTDC_G6 *//*
					 <STM32_PINMUX('C', 9, AF14)>, /* LTDC_B2 *//*
					 <STM32_PINMUX('C', 10, AF14)>, /* LTDC_R2 *//*
					 <STM32_PINMUX('D', 8, AF14)>, /* LTDC_B7 *//*
					 <STM32_PINMUX('D', 9, AF14)>, /* LTDC_B0 *//*
					 <STM32_PINMUX('D', 10, AF14)>, /* LTDC_B3 *//*
					 <STM32_PINMUX('D', 15, AF14)>, /* LTDC_R1 *//*
					 <STM32_PINMUX('E', 6, AF14)>, /* LTDC_G1 *//*
					 <STM32_PINMUX('E', 11, AF14)>, /* LTDC_G3 *//*
					 <STM32_PINMUX('E', 12, AF14)>, /* LTDC_B4 *//*
					 <STM32_PINMUX('E', 13, AF14)>, /* LTDC_DE *//*
					 <STM32_PINMUX('E', 14, AF13)>, /* LTDC_G0 *//*
					 <STM32_PINMUX('E', 15, AF14)>, /* LTDC_R7 *//*
					 <STM32_PINMUX('F', 11, AF14)>, /* LTDC_G5 *//*
					 <STM32_PINMUX('G', 8, AF14)>, /* LTDC_G7 *//*
					 <STM32_PINMUX('G', 13, AF14)>; /* LTDC_R0 *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 7, AF14)>; /* LTDC_CLK *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	ltdc_sleep_pins_mx: ltdc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* LTDC_B5 *//*
					 <STM32_PINMUX('A', 4, ANALOG)>, /* LTDC_VSYNC *//*
					 <STM32_PINMUX('A', 5, ANALOG)>, /* LTDC_R4 *//*
					 <STM32_PINMUX('A', 6, ANALOG)>, /* LTDC_G2 *//*
					 <STM32_PINMUX('A', 8, ANALOG)>, /* LTDC_R6 *//*
					 <STM32_PINMUX('A', 10, ANALOG)>, /* LTDC_B1 *//*
					 <STM32_PINMUX('B', 0, ANALOG)>, /* LTDC_R3 *//*
					 <STM32_PINMUX('B', 8, ANALOG)>, /* LTDC_B6 *//*
					 <STM32_PINMUX('B', 10, ANALOG)>, /* LTDC_G4 *//*
					 <STM32_PINMUX('C', 0, ANALOG)>, /* LTDC_R5 *//*
					 <STM32_PINMUX('C', 6, ANALOG)>, /* LTDC_HSYNC *//*
					 <STM32_PINMUX('C', 7, ANALOG)>, /* LTDC_G6 *//*
					 <STM32_PINMUX('C', 9, ANALOG)>, /* LTDC_B2 *//*
					 <STM32_PINMUX('C', 10, ANALOG)>, /* LTDC_R2 *//*
					 <STM32_PINMUX('D', 8, ANALOG)>, /* LTDC_B7 *//*
					 <STM32_PINMUX('D', 9, ANALOG)>, /* LTDC_B0 *//*
					 <STM32_PINMUX('D', 10, ANALOG)>, /* LTDC_B3 *//*
					 <STM32_PINMUX('D', 15, ANALOG)>, /* LTDC_R1 *//*
					 <STM32_PINMUX('E', 6, ANALOG)>, /* LTDC_G1 *//*
					 <STM32_PINMUX('E', 11, ANALOG)>, /* LTDC_G3 *//*
					 <STM32_PINMUX('E', 12, ANALOG)>, /* LTDC_B4 *//*
					 <STM32_PINMUX('E', 13, ANALOG)>, /* LTDC_DE *//*
					 <STM32_PINMUX('E', 14, ANALOG)>, /* LTDC_G0 *//*
					 <STM32_PINMUX('E', 15, ANALOG)>, /* LTDC_R7 *//*
					 <STM32_PINMUX('F', 11, ANALOG)>, /* LTDC_G5 *//*
					 <STM32_PINMUX('G', 7, ANALOG)>, /* LTDC_CLK *//*
					 <STM32_PINMUX('G', 8, ANALOG)>, /* LTDC_G7 *//*
					 <STM32_PINMUX('G', 13, ANALOG)>; /* LTDC_R0 *//*
		};
	};

	sai1a_pins_mx: sai1a_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 6, AF6)>; /* SAI1_SD_A *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	sai1a_sleep_pins_mx: sai1a_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 6, ANALOG)>; /* SAI1_SD_A *//*
		};
	};

	sai1b_pins_mx: sai1b_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 6, AF6)>, /* SAI1_SD_B *//*
					 <STM32_PINMUX('F', 7, AF6)>, /* SAI1_MCLK_B *//*
					 <STM32_PINMUX('F', 8, AF6)>, /* SAI1_SCK_B *//*
					 <STM32_PINMUX('F', 9, AF6)>; /* SAI1_FS_B *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	sai1b_sleep_pins_mx: sai1b_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 6, ANALOG)>, /* SAI1_SD_B *//*
					 <STM32_PINMUX('F', 7, ANALOG)>, /* SAI1_MCLK_B *//*
					 <STM32_PINMUX('F', 8, ANALOG)>, /* SAI1_SCK_B *//*
					 <STM32_PINMUX('F', 9, ANALOG)>; /* SAI1_FS_B *//*
		};
	};

	sai2a_pins_mx: sai2a_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 11, AF10)>, /* SAI2_SD_A *//*
					 <STM32_PINMUX('D', 12, AF10)>, /* SAI2_FS_A *//*
					 <STM32_PINMUX('D', 13, AF10)>, /* SAI2_SCK_A *//*
					 <STM32_PINMUX('E', 0, AF10)>; /* SAI2_MCLK_A *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	sai2a_sleep_pins_mx: sai2a_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 11, ANALOG)>, /* SAI2_SD_A *//*
					 <STM32_PINMUX('D', 12, ANALOG)>, /* SAI2_FS_A *//*
					 <STM32_PINMUX('D', 13, ANALOG)>, /* SAI2_SCK_A *//*
					 <STM32_PINMUX('E', 0, ANALOG)>; /* SAI2_MCLK_A *//*
		};
	};

	sai2b_pins_mx: sai2b_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 9, AF10)>, /* SAI2_FS_B *//*
					 <STM32_PINMUX('G', 10, AF10)>; /* SAI2_SD_B *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	sai2b_sleep_pins_mx: sai2b_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 9, ANALOG)>, /* SAI2_FS_B *//*
					 <STM32_PINMUX('G', 10, ANALOG)>; /* SAI2_SD_B *//*
		};
	};
	*/

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 15, AF9)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('D', 3, AF9)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 4, AF9)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 15, AF9)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('D', 3, AF9)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 4, AF9)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('E', 5, AF9)>; /* SDMMC2_D6 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins3 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 15, ANALOG)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('D', 3, ANALOG)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('E', 4, ANALOG)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	sdmmc3_pins_mx: sdmmc3_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 0, AF10)>, /* SDMMC3_CMD */
					 <STM32_PINMUX('D', 1, AF10)>, /* SDMMC3_D0 */
					 <STM32_PINMUX('D', 4, AF10)>, /* SDMMC3_D1 */
					 <STM32_PINMUX('D', 5, AF10)>, /* SDMMC3_D2 */
					 <STM32_PINMUX('D', 7, AF10)>; /* SDMMC3_D3 */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 15, AF10)>; /* SDMMC3_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	sdmmc3_opendrain_pins_mx: sdmmc3_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 0, AF10)>; /* SDMMC3_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 1, AF10)>, /* SDMMC3_D0 */
					 <STM32_PINMUX('D', 4, AF10)>, /* SDMMC3_D1 */
					 <STM32_PINMUX('D', 5, AF10)>, /* SDMMC3_D2 */
					 <STM32_PINMUX('D', 7, AF10)>; /* SDMMC3_D3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('G', 15, AF10)>; /* SDMMC3_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	sdmmc3_sleep_pins_mx: sdmmc3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* SDMMC3_CMD */
					 <STM32_PINMUX('D', 1, ANALOG)>, /* SDMMC3_D0 */
					 <STM32_PINMUX('D', 4, ANALOG)>, /* SDMMC3_D1 */
					 <STM32_PINMUX('D', 5, ANALOG)>, /* SDMMC3_D2 */
					 <STM32_PINMUX('D', 7, ANALOG)>, /* SDMMC3_D3 */
					 <STM32_PINMUX('G', 15, ANALOG)>; /* SDMMC3_CK */
		};
	};

	// removed for optimization purposes: not needed on uboot
	/*
	tim4_pwm_pins_mx: tim4_pwm_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 6, AF2)>, /* TIM4_CH1 *//*
					 <STM32_PINMUX('D', 14, AF2)>; /* TIM4_CH3 *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	tim4_pwm_sleep_pins_mx: tim4_pwm_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 6, ANALOG)>, /* TIM4_CH1 *//*
					 <STM32_PINMUX('D', 14, ANALOG)>; /* TIM4_CH3 *//*
		};
	};
	*/

	uart4_pins_mx: uart4_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
			bias-pull-up;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* UART4_RX */
					 <STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
		};
	};

	// removed for optimization purposes: not needed on uboot
	/*
	uart5_pins_mx: uart5_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF8)>, /* UART5_DE *//*
					 <STM32_PINMUX('C', 12, AF8)>; /* UART5_TX *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 2, AF8)>; /* UART5_RX *//*
			bias-disable;
		};
	};

	uart5_sleep_pins_mx: uart5_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* UART5_DE *//*
					 <STM32_PINMUX('C', 12, ANALOG)>, /* UART5_TX *//*
					 <STM32_PINMUX('D', 2, ANALOG)>; /* UART5_RX *//*
		};
	};

	usart1_pins_mx: usart1_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 9, AF7)>; /* USART1_TX *//*
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 7, AF7)>; /* USART1_RX *//*
			bias-disable;
		};
	};

	usart1_sleep_pins_mx: usart1_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 9, ANALOG)>, /* USART1_TX *//*
					 <STM32_PINMUX('B', 7, ANALOG)>; /* USART1_RX *//*
		};
	};
	*/
	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&pinctrl_z {
	u-boot,dm-pre-reloc;

	/* USER CODE BEGIN pinctrl_z */
	/* USER CODE END pinctrl_z */
};

// removed for optimization purposes: not needed on uboot
/*
&m4_rproc{
	/*Restriction: "memory-region" property is not managed - please to use User-Section if needed*//*
	mboxes = <&ipcc 2>;
	mbox-names = "shutdown";
	status = "okay";

	/* USER CODE BEGIN m4_rproc *//*
	/* USER CODE END m4_rproc *//*

	m4_system_resources{
		status = "okay";

		/* USER CODE BEGIN m4_system_resources *//*
		/* USER CODE END m4_system_resources *//*
	};
};

&adc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&adc_pins_mx>;
	pinctrl-1 = <&adc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN adc *//*
	/* USER CODE END adc *//*
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec *//*
	/* USER CODE END bsec *//*
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 *//*
	/* USER CODE END dma1 *//*
};

&dma2{
	status = "disabled";

	/* USER CODE BEGIN dma2 *//*
	/* USER CODE END dma2 *//*
};

&dmamux1{

	dma-masters = <&dma1>;
	dma-channels = <8>;

	status = "okay";

	/* USER CODE BEGIN dmamux1 *//*
	/* USER CODE END dmamux1 *//*
};

&dts{
	status = "okay";

	/* USER CODE BEGIN dts *//*
	/* USER CODE END dts *//*
};

&ethernet0{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	status = "disabled";

	/* USER CODE BEGIN ethernet0 *//*
	/* USER CODE END ethernet0 *//*
};

&gpu{
	status = "okay";

	/* USER CODE BEGIN gpu *//*
	/* USER CODE END gpu *//*
};

&hsem{
	status = "okay";

	/* USER CODE BEGIN hsem *//*
	/* USER CODE END hsem *//*
};
*/

&i2c4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c4_pins_mx>;
	pinctrl-1 = <&i2c4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c4 */
	/* USER CODE END i2c4 */
};

// removed for optimization purposes: not needed on uboot
/*
&ipcc{
	status = "okay";

	/* USER CODE BEGIN ipcc *//*
	/* USER CODE END ipcc *//*
};

&iwdg2{
	status = "disabled";

	/* USER CODE BEGIN iwdg2 *//*
	/* USER CODE END iwdg2 *//*
};

&dsi {
	status = "disabled";
};

&ltdc {

	status = "okay";	
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ltdc_pins_mx>;
	pinctrl-1 = <&ltdc_sleep_pins_mx>;
	
	/* USER CODE BEGIN ltdc *//*
	u-boot,dm-pre-reloc;

	port {
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_ep0_out: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&panel_in>;
		};
	};
	/* USER CODE END ltdc *//*
};

&m_can1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan1_pins_mx>;
	pinctrl-1 = <&fdcan1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can1 *//*
	/* USER CODE END m_can1 *//*
};

&m_can2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan2_pins_mx>;
	pinctrl-1 = <&fdcan2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can2 *//*
	/* USER CODE END m_can2 *//*
};

&m4_dma2{
	status = "okay";

	/* USER CODE BEGIN m4_dma2 *//*
	/* USER CODE END m4_dma2 *//*
};

&mdma1{
	status = "okay";

	/* USER CODE BEGIN mdma1 *//*
	/* USER CODE END mdma1 *//*
};
*/

&pwr_regulators{
	status = "okay";

	/* USER CODE BEGIN pwr_regulators */
	/* USER CODE END pwr_regulators */
};

&rcc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

// removed for optimization purposes: not needed on uboot
/*
&rtc{
	status = "okay";

	/* USER CODE BEGIN rtc *//*
	/* USER CODE END rtc *//*
};

&sai1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&sai1a_pins_mx>, <&sai1b_pins_mx>;
	pinctrl-1 = <&sai1a_sleep_pins_mx>, <&sai1b_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sai1 *//*
	/* USER CODE END sai1 *//*

	sai1a:audio-controller@4400a004{
		status = "okay";

		/* USER CODE BEGIN sai1a *//*
		/* USER CODE END sai1a *//*
	};

	sai1b:audio-controller@4400a024{
		status = "okay";

		/* USER CODE BEGIN sai1b *//*
		/* USER CODE END sai1b *//*
	};
};

&sai2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&sai2a_pins_mx>, <&sai2b_pins_mx>;
	pinctrl-1 = <&sai2a_sleep_pins_mx>, <&sai2b_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sai2 *//*
	/* USER CODE END sai2 *//*

	sai2a:audio-controller@4400b004{
		status = "okay";

		/* USER CODE BEGIN sai2a *//*
		/* USER CODE END sai2a *//*
	};

	sai2b:audio-controller@4400b024{
		status = "okay";

		/* USER CODE BEGIN sai2b *//*
		/* USER CODE END sai2b *//*
	};
};
*/

&sdmmc2{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	non-removable;
	bus-width = <8>;
	/* USER CODE END sdmmc2 */
};

&sdmmc3{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc3_pins_mx>;
	pinctrl-1 = <&sdmmc3_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc3_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc3 */
	/* USER CODE END sdmmc3 */
};

// removed for optimization purposes: not needed on uboot
/*
&tamp{
	status = "okay";

	/* USER CODE BEGIN tamp *//*
	/* USER CODE END tamp *//*
};

&timers4{
	status = "okay";

	/* USER CODE BEGIN timers4 *//*
	/* USER CODE END timers4 *//*

	pwm{
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&tim4_pwm_pins_mx>;
		pinctrl-1 = <&tim4_pwm_sleep_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN timers4_pwm *//*
		/* USER CODE END timers4_pwm *//*
	};
};
*/

&uart4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/* USER CODE END uart4 */
};

// removed for optimization purposes: not needed on uboot
/*
&uart5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart5_pins_mx>;
	pinctrl-1 = <&uart5_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart5 *//*
	/* USER CODE END uart5 *//*
};

&usart1{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart1_pins_mx>;
	pinctrl-1 = <&usart1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart1 *//*
	/* USER CODE END usart1 *//*
};
*/

&usbh_ehci{
	status = "okay";

	/* USER CODE BEGIN usbh_ehci */
	/* USER CODE END usbh_ehci */
};

&usbh_ohci{
	status = "okay";

	/* USER CODE BEGIN usbh_ohci */
	/* USER CODE END usbh_ohci */
};

&usbotg_hs{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbotg_hs */
	u-boot,force-b-session-valid;
	hnp-srp-disable;
	dr_mode = "peripheral";
	/* USER CODE END usbotg_hs */
};

&usbphyc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc */
	/* USER CODE END usbphyc */
};

&usbphyc_port0{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc_port0 */
	/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN usbphyc_port1 */
	/* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */
&rng1{
	status = "okay";
};
/* USER CODE END addons */

